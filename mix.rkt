#lang racket

(require "utils.rkt")
(provide (all-defined-out))

(define mix
  '((read program division vs0)
    (init (:= pp0 (caadr program)) (:= pending (list (cons pp0 vs0))) (:= marked '()) (:= blocks-in-pending (create-blocks-in-pending (cdr program) division))
          (:= residual (list (cons 'read (get-dynamic-args program division)))) (:= bb '()) (:= command '()) (:= ppx pp0) (goto loop))
    (loop (if (empty? pending) stop loop-body))
    (loop-body (:= pp (caar pending)) (:= vs (cdar pending)) (:= pending (cdr-or-empty pending)) (:= marked (cons (cons pp vs) marked))
               (:= code (list (cons pp vs))) (goto lookup-loop))
    (inner-loop (if (empty? bb) loop-end inner-loop-body))
    (inner-loop-body (:= command (car bb)) (:= bb (cdr-or-empty bb)) (goto case1))
    (case1 (if (equal? (car command) ':=) do-assign case2))
    (case2 (if (equal? (car command) 'goto) do-goto case3))
    (case3 (if (equal? (car command) 'if) do-if case4))
    (case4 (if (equal? (car command) 'return) do-return error))
    (do-assign (if (is-static (cadr command) division) do-assign-static do-assign-dynamic))
    (do-assign-static (:= vs (update-env vs (cadr command) (eval-expr (caddr command) vs))) (goto inner-loop))
    (do-assign-dynamic (:= code (cons (list ':= (cadr command) (reduce (caddr command) vs)) code)) (goto inner-loop))
    (do-goto (:= bb (lookup (cadr command) program)) (goto inner-loop))
    (do-if (if (is-static (cadr command) division) do-if-static do-if-dynamic))
    (do-if-static (if (eval-expr (cadr command) vs) do-if-static-true do-if-static-false))
    (do-if-static-true (:= bb (lookup (caddr command) program)) (goto inner-loop))
    (do-if-static-false (:= bb (lookup (cadddr command) program)) (goto inner-loop))
    (do-if-dynamic (:= pending (update-pending (update-pending pending (cons (caddr command) vs) marked) (cons (cadddr command) vs) marked))
                   (:= code (cons (list 'if (reduce (cadr command) vs) (cons (caddr command) vs) (cons (cadddr command) vs)) code)) (goto inner-loop))
    (do-return (:= code (cons (list 'return (reduce (cadr command) vs)) code)) (goto inner-loop))
    (loop-end (:= residual (cons (reverse code) residual)) (:= bb '()) (:= command '()) (goto loop))
    (stop (return (remove-env (improve-labels (reverse residual)))))
    (error (return (raise 'syntaxerror: command)))
    (lookup-loop (if (equal? pp ppx) lookup-end lookup-body))
    (lookup-body (:= ppx (next-label-after ppx blocks-in-pending)) (goto lookup-loop))
    (lookup-end (:= bb (lookup ppx program)) (:= ppx pp0) (goto inner-loop))
    )
  )
